[{"/Users/Used/Documents/Practice-Projects/react-forms/src/App.js":"1","/Users/Used/Documents/Practice-Projects/react-forms/src/index.js":"2","/Users/Used/Documents/Practice-Projects/react-forms/src/components/AutoForm.js":"3","/Users/Used/Documents/Practice-Projects/react-forms/src/components/Field.js":"4","/Users/Used/Documents/Practice-Projects/react-forms/src/formConfig.js":"5","/Users/Used/Documents/Practice-Projects/react-forms/src/components/Spinner.js":"6","/Users/Used/Documents/Practice-Projects/react-forms/src/components/Messge.js":"7"},{"size":762,"mtime":1612828164633,"results":"8","hashOfConfig":"9"},{"size":220,"mtime":1611790919661,"results":"10","hashOfConfig":"9"},{"size":3528,"mtime":1611867809729,"results":"11","hashOfConfig":"9"},{"size":759,"mtime":1611854776283,"results":"12","hashOfConfig":"9"},{"size":797,"mtime":1612827079979,"results":"13","hashOfConfig":"9"},{"size":472,"mtime":1611866347399,"results":"14","hashOfConfig":"9"},{"size":345,"mtime":1611865976710,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1oowz4h",{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23","usedDeprecatedRules":"20"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"20"},"/Users/Used/Documents/Practice-Projects/react-forms/src/App.js",[],"/Users/Used/Documents/Practice-Projects/react-forms/src/index.js",[],["32","33"],"/Users/Used/Documents/Practice-Projects/react-forms/src/components/AutoForm.js",["34"],"import { useState, useEffect } from 'react';\nimport { css } from '@emotion/css'\nimport Field from './Field';\nimport Spinner from './Spinner';\nimport Message from './Messge'\n\nconst AutoFormCSS = css`\n  width: 375px;\n  margin-left: 5px;\n  input, textarea {\n    display: block;\n    width: 100%;\n    padding: .375rem .75rem;\n    font-size: 1rem;\n    line-height: 1.5;\n    color: #495057;\n    background-color: #fff;\n    background-clip: padding-box;\n    border: 1px solid #ced4da;\n    border-radius: .25rem;\n    margin-bottom: .8rem;\n  }\n  label {\n    margin-bottom: .65rem;\n    display: block;\n    padding-left: 2px;\n    color: #fff;\n    font-weight: 600;\n    letter-spacing: 0.75px;\n  }\n  textarea {\n    height: 125px;\n  }\n  button {\n    display: inline-block;\n    font-weight: 400;\n    text-align: center;\n    white-space: nowrap;\n    vertical-align: middle;\n    user-select: none;\n    border: 1px solid transparent;\n    padding: .55rem 1.5rem;\n    font-size: 1.2rem;\n    line-height: 1.5;\n    border-radius: .25rem;\n    color: #fff;\n    background-color: #FD6413;\n    cursor: pointer;\n  }\n  button:disabled {\n    background-color: #777;\n  }\n  .form-bottom {\n    margin-top: 25px;\n    margin-bottom: 25px;\n    display: flex;\n    align-items: center;\n    button {\n      margin-right: 5px;\n    }\n  }\n  .message {\n    position: relative;\n    padding: .75rem 1.25rem;\n    margin-bottom: 1rem;\n    border: 1px solid transparent;\n    border-radius: .25rem;\n  }\n  .message.success {\n    color: #155724;\n    background-color: #d4edda;\n    border-color: #c3e6cb;\n  }\n  .message.error {\n    color: #721c24;\n    background-color: #f8d7da;\n    border-color: #f5c6cb;\n  }\n`\n\n\nfunction AutoForm({ form, onSubmit, status }) {\n  // initialize fields with form feilds props\n  const [fields, setFields] = useState(\n    form.fields.map(field => ({\n      ...field,\n      name: field.name || field.label,\n      value: ''\n    }))\n  )\n  \n  /*\n  console.log(fields)\n  {label: \"Email\"\n    name: \"Email\"\n    placeholder: \"xyz@gmail.com\"\n    required: true\n    type: \"email\"\n    value: \"\"\n  } \n  */\n\n  // To clean up input field after success\n  useEffect(() => {\n    if (status === 'success') {\n      setFields(fields.map(field => ({...field, value: ''})))\n    }\n  }, [status])\n\n  const handleChange = e => {\n    const name = e.target.getAttribute(\"name\");\n    // Map through the feilds array and update the value that matches the name property.\n    const newFields = fields.map(field => {\n      return field.name === name\n            ? {...field, value: e.target.value}\n            : field;\n    })\n    setFields(newFields);\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault();\n   \n    const formData = fields.reduce((accu, field) => {\n      return {...accu, [field.name]: field.value}\n    }, {})\n    /*\n      formData\n      {Name: \"Jane Duh\", Location: \"los angeles, ca\", Email: \"abcd@cool.com\", Message: \"hello from Jane\"}\n     */\n    onSubmit(formData);\n  }\n\n  const { messages, spinner } = form.config\n  return (\n    <form className={AutoFormCSS} onSubmit={handleSubmit}>\n      {\n        fields.map(field => (\n          <Field key={field.name} field={field} onChange={handleChange}/>\n        ))\n      }\n\n      <div className=\"form-bottom\">\n        <button type=\"submit\" disabled={status === 'success'}>\n          {form.config.buttonText || 'Submit'}\n        </button>\n        <Spinner loading={status === 'loading' && spinner} />\n      </div>\n      <Message status={status} text={messages[status]} />\n    </form>\n  );\n}\n\nexport default AutoForm;\n","/Users/Used/Documents/Practice-Projects/react-forms/src/components/Field.js",[],"/Users/Used/Documents/Practice-Projects/react-forms/src/formConfig.js",[],"/Users/Used/Documents/Practice-Projects/react-forms/src/components/Spinner.js",[],"/Users/Used/Documents/Practice-Projects/react-forms/src/components/Messge.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":108,"column":6,"nodeType":"41","endLine":108,"endColumn":14,"suggestions":"42"},"no-native-reassign",["43"],"no-negated-in-lhs",["44"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'fields'. Either include it or remove the dependency array. You can also do a functional update 'setFields(f => ...)' if you only need 'fields' in the 'setFields' call.","ArrayExpression",["45"],"no-global-assign","no-unsafe-negation",{"desc":"46","fix":"47"},"Update the dependencies array to be: [fields, status]",{"range":"48","text":"49"},[2240,2248],"[fields, status]"]